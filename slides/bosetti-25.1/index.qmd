---
title: "The `adas.utils` package"
subtitle: "Design of Experiments, the tidy way"
date: 2025-05-30
date-format: "rtug::25.1, YYYY-MM-DD"
author: Paolo Bosetti
institute: University of Trento
title-slide-attributes:
  data-background-image: /images/logo.png
  data-background-size: 20%
  data-background-position: top center
  data-background-repeat: no-repeat
draft: false
categories: [packages, meeting, rtug::25.1]
format: 
  revealjs:
    width: 1280
    height: 720
    margin: 0.1
    slide-number: true
    output-location: column
    code-line-numbers: true
    code-annotations: below
    preview-links: auto
    theme: [default, ../slides.scss]
    chalkboard: true
    footer: "RTUG --- [https://rtug.unitn.it/slides.html](/slides.html)"
    fig-width: 5
    fig-height: 4
    fig-dpi: 300
    touch: true
    email-obfuscation: javascript
    pdf-separate-fragments: true
    link-external-icon: true
    lang: en-EN
abstract: |
  We are here presenting the `adas.utils` package, a collection of functions for the design of experiments, the tidy way.
---

```{r setup}
#| include: false
#| echo: false
library(tidyverse)
library(adas.utils)
library(ggforce)
```


# {{< bi list-task >}} Contents

::: columns
:::{.column width=66%}
* Design of Experiments (*DoE*) and factorial plans
* How to do DoE in vanilla R
* How to do DoE with the `adas.utils` package
* Alternatives
* Future developments
:::

:::{.column width=33%}
![](/posts/004-adas.utils/hypercube.jpg)
:::
:::

## Design of Experiments and factorial plans

::: columns
:::{.column width=66%}
* Design of Experiments (*DoE*) is a collection of statistical techniques to plan and analyze **industrial** experiments
* Predictors are typically many (10 or more), and can be continuous or categorical
* Often a first-order model is enough
* Fitting a **response surface** on a multidimensional grid can be costly

DoE aims at getting the [most information]{.bgreen} from a [minimum of experiments]{.bblue}
:::

:::{.column width=34%}
![](https://m.media-amazon.com/images/I/81zdcVeRwRL._SY385_.jpg){width=80% fig-align=center}
:::
:::

::: aside
{{< bi book >}} See the famous "Design and Analysis of Experiments", by Douglas C. Montgomery, 10th edition, Wiley, 2020. 
:::

## DoE in brief

::: columns
:::{.column width=66%}
* Plan for a grid of treatments (*factorial plan*) in the $n$-hyperspace, where $n$ is the number of predictors, or **process parameters**
* The FP can be optimized, sacrificing completeness for efficiency (*Fractional Factorial Plans*)
* The FP must be [randomized]{.bgreen}, to reduce bias due to systematic errors
* The FP can be [non-replicated]{.bgreen}, to further reduce costs (*Daniel's method*)
* The FP can be [augmented]{.bgreen}, to add new treatments to an existing plan (*Augmented Factorial Plans*)
* We use [coded units]{.bgreen} (i.e. normalized to $[-1,1]$)
:::

:::{.column width=34%}
![2 factors CCD](CCD2.png){width=60% fig-align=center}

![3 factors CCD](CCD3.png){width=60% fig-align=center}
:::
:::


## Simple example in vanilla R

Create a non-replicated **full factorial plan** with three factors, two levels each ($2^3$):

```{r}
#| echo: true
# Make the grid
fp <- expand.grid(
  A=c(-1,1), 
  B=c(-1,1), 
  C=c(-1,1), 
  Y=NA
)

# Add orders
fp$StdOrder <- 1:nrow(fp)
fp$RunOrder <- sample(nrow(fp))
fp
```

Then save it (typ. as CSV), perform the experiments, fill the `Y` yield column, and load it back for the analysis

::: aside
{{< bi info-circle >}} In a **replicated** $k\cdot2^n$ FP, the replica index is formally just another factor with $k$ levels
:::


## Simple example in vanilla R

For a fractional factorial plan, we reject one half of the FP according to a **defining relationship**: $I=ABC$, which can be transformed as $C=AB$ **{{< bi bookmark-fill >}}**

We remove rows where the sign of $C$ is the product of $A$ and $B$:

```{r}
#| echo: true
# Extract the fraction where C=AB
ffp <- fp[fp$C==fp$A*fp$B, ]

# Add orders
fp$StdOrder <- 1:nrow(fp)
ffp$RunOrder <- sample(nrow(ffp))
ffp
```

But mind you! for this to work, columns `A`, `B`, and `C` **must NOT be [factors]{.ul}!** (in the R sense)

:::{.callout-note icon=false}
## {{< bi bookmark-fill >}} Remark on defining relationships
It holds the signs algebra: $X\cdot X=I,~I\cdot X = X$, thus $CI = ABCC~\rightarrow~C=AB$
:::

::: aside
{{< bi info-circle >}} When factors become numerous, and when you need to fraction two or three or more times, the above operations become cumbersome and error prone
:::


## Simple example in vanilla R

Analyzing the FP is mostly a matter of:

* defining a linear model, `Y~A*B*C`
* using `lm()` to fit the model
* using `residuals()` to check the residuals for normality and patterns
* using `anova()` to analyze the model
* simplify the model if necessary

But if the FP is **non-replicated**, you can't fit a model unless you remove some terms from the general linear model `Y~A*B*C`. To do so, Daniel's method suggests to make a [Q-Q plot of the effects]{.bblue}: **not straightforward** 


## Simple example in vanilla R

As an example for a $2^4$ FP, the Daniel's Q-Q plot of the effects can be obtained by:
```{r}
lvl <- c("-", "+")
fp <- expand.grid(A=lvl, B=lvl, C=lvl, D=lvl, Y=NA)
fp$Y <- c(
  1.68, 1.98, 4.98, 5.70,  # (1) a b ab
  3.24, 3.44, 9.97, 9.07,  # c ac bc abc
  2.07, 2.44, 7.77, 9.43,  # d ad bd abd
  4.09, 4.53, 11.75, 16.30 # cd acd bcd abcd
)
```


```{r}
#| echo: true
# build a full linear model:
fp.lm <- lm(Y ~ A*B*C*D, data=fp)

# prepare plot data:
len     <- length(fp.lm$effects)
effects <- fp.lm$effects[2:len]

# Q-Q plot:
qq      <- qqnorm(effects)
qqline(effects)

# add names:
text(qq$x, qq$y, 
     labels=names(effects))
```

::: aside
**{{< bi exclamation-diamond >}} Problems**: not immediate; the plot is not really clean and it often needs tuning (scales and labels size)
:::

## Simple example in vanilla R

{{< bi exclamation-diamond >}} Problems:

::: columns
:::{.column width=66%}
* difficult to manage **scaled units** *vs.* non scaled units
* factor names aren't **mnemonic** (which parameter is represented by `F`?)
* **fractioning** an FP is not trivial
* **Daniel's method** is tricky and repetitive
* **augmenting a plan** is not trivial when the number of factors is 4 or more
* everything is not very **tidy** (in the sense of [tidyverse]{.bgreen})
:::

:::{.column width=34%}
![](https://www.tidyverse.org/css/images/hex/ggplot2.png){width=60% fig-align=center}
:::
:::

## Enter `adas.utils` package

The package is available on CRAN:

```{r}
#| echo: true
#| eval: false
install.packages("adas.utils")
library(adas.utils)
```

Don't forget to look at the vignette:

```{r}
#| echo: true
#| eval: false
vignette("adas.utils")
```



## Plain FPs

Base $2\cdot 2^2$ FP:

```{r}
#| echo: true
library(adas.utils)

# Two factors, two replicas
fp_design_matrix(2, rep=2)
```

::: callout-note
Note the Yates' treatment names in `.treat` column
:::

::: aside
{{< bi info-circle >}} The object returned, class `factorial.plan`, is a `tibble` with added attributes that keep track of the design
:::


## Plain FPs, with named factors

We can tie factors with corresponding parameter names:

```{r}
#| echo: true
# Two factors, two replicas, 
# with names
fp_design_matrix(2, rep=2) %>%
  fp_add_names(
    A="Temperature",
    B="Pressure"
  )
```

::: aside
{{< bi info-circle >}} Note that it's been designed to support the `magrittr` pipe operator `%>%` (or the native R one `|>`)
:::


## Plain FPs, with named factors and actual scales

Actual scales can be added for reference:

```{r}
#| echo: true
# Two factors, two replicas, 
# with names and scales
fp_design_matrix(2, rep=2) %>% 
  fp_add_names(
    A="Temperature", 
    B="Pressure"
  ) %>% 
  fp_add_scale(
    A=c(20, 25), 
    B=c(75, 125), 
    suffix=".scaled"
  ) %>% 
  # Just to keep output compact ðŸ˜Ž 
  select(-c(StdOrder, RunOrder))
```

::: aside
{{< bi info-circle >}} Note that it's been designed to support the `magrittr` pipe operator `%>%` (or the native R one `|>`)
:::


## Augmented FPs

We can augment a $2^n$ FP with a **central treatment**:

```{r}
#| echo: true
# Three factors, scaled
fp_design_matrix(3) %>%
  fp_add_scale(B=c(10, 20)) %>% 
  
  # Augment with a central treatment
  fp_augment_center(rep=4) %>% 
  
  # Just to keep output compact ðŸ˜Ž 
  slice_tail(n=6)
```


## Augmented FPs

And then further augment the FP with **axial treatments** to get a rotatable *Composite Centered Design* (CCD):

```{r}
#| echo: true
fp_design_matrix(2) %>%
  fp_add_scale(
    A=c(7,18), 
    B=c(10, 20)) %>%
  fp_augment_center(rep=1) %>%
  # Also augment with axial treatments
  fp_augment_axial(rep=1) %>% 
  # Just to keep output compact ðŸ˜Ž 
  select(-RunOrder) %>% 
  as_tibble() # don't print header
```

:::{.callout-note}
Automatically scaling CCDs helps a lot in correctly defining process settings for each treatment
:::

::: aside
{{< bi info-circle >}} Converted to a tibble to reduce the printout length
:::


## Augmented FPs

And then further augment the FP with **axial treatments** to get a rotatable *Centered Composite Design* (CCD):


```{r}
#| echo: true
#| fig.width: 6
#| fig.height: 4
fp_design_matrix(2) %>%
  fp_add_scale(
    A=c(7,18), 
    B=c(10, 20)) %>%
  fp_augment_center(rep=1) %>%
  fp_augment_axial(rep=1) %>% 
  # Make a plot
  ggplot(aes(x=A, y=B)) + 
  geom_circle(
    aes(x0=0, y0=0, r=sqrt(2)), 
    lty=2, color=gray(0.5)) +
  geom_label(aes(label=.treat)) +
  coord_fixed(xlim=c(-1.5,1.5)*6/4)
```

:::{.callout-note}
Of course it works on higher dimensions as well
:::




## Fractional Factorial Plans

We can fraction a $2^n$ FP by adding subsequent **defining relationships**:

```{r}
#| echo: true
fp_design_matrix(5) %>% 
  fp_fraction(~A*B*C*D) %>% 
  fp_fraction(~B*C*D*E) %>%
  select(-c(StdOrder,RunOrder,.rep))
```

## Save design matrix

You can save the design matrix as CSV file (for collecting experimental data), then load it back **into** the original FP object (thus preserving attributes):

```{r}
#| echo: true
fp <- fp_design_matrix(4) %>% 
  fp_fraction(~A*B*C*D) %>% 
  fp_write_csv("fp.csv")

fp <- fp %>% 
  fp_read_csv("fp.csv")

fp %>% select(-RunOrder)
```

::: callout-note
The saved CSV file has a commented header with FFP details (e.g. defining relationships, factors names, scales, etc.)
:::


## Alias structures

Fractioning a FP creates **alias structures**: the `adas.utils` package can help you with that too:

```{r}
#| echo: true
fp_alias_matrix(~A*B*C, ~B*C*D)
```


## Alias structures

The alias matrix can be plotted directly, via `ggplot2`:

```{r}
#| echo: true
#| fig.width: 6
#| fig.height: 4
fp_alias_matrix(~A*B*C, ~B*C*D) %>% 
  plot()
```

::: callout-note
The third generator is the **dependent one**, i.e. the one that has all terms not in common in the first two generators
:::


## Daniel's method

The `adas.utils` package can also help you with **Daniel's method**: the `daniel_plot_hn()` function takes a linear model object and returns a half-normal plot of the effects:

```{r}
#| echo: true
filtration %>% 
  lm(Y~A*B*C*D, data=.) %>%
  daniel_plot_hn(nlab=6,repel=TRUE) +
  labs(title="Rev. model: Y~A*C+A*D")
```


## Pareto chart of the effects

It's easy to build a Pareto chart of the effects in a linear model:

```{r}
#| echo: true
filtration %>% 
  lm(Y~A*B*C*D, data=.) %>%
  pareto_chart() +
  theme(
    legend.position = "bottom",
    axis.text.x = 
      element_text(angle=45,hjust=1))
```


## Tukey plots

Tukey's test `TukeyHSD()` is not compatible with `ggplot2`, and its output pretty limited (and not very appealing). The `adas.utils` package provides a `ggTukey()` function that can be used to plot the results of Tukey's test, **also with multiple groups**:

```{r}
#| echo: true
#| fig.width: 6
#| fig.height: 3.5
battery %>%
  ggTukey(Response~Material, 
          splt=~Temperature, 
          conf.level=0.99)
```

::: aside
{{< bi info-circle >}} `ggTukey()` is a **generic** with two methods: `ggTukey.data.frame()` and `ggTukey.TukeyHSD()`
:::

## Alternatives?

Only **pre-tidyverse** packages as:

* `DoE.base`
* `FrF2`



## Future developments

* `adas.utils` is currently `v1.2.0` on CRAN
  * {{< bi terminal >}} `install.packages("adas.utils")`
* Development version on GitHub `v1.2.1`
  * {{< bi terminal >}} `devtools::install_github("pbosetti/adas.utils")`
* The package is open to contributions **{{< bi github >}}**
* Currently working on:
  - a tool that suggests [minimum aberration designs]{.bgreen} for FFPs $2^{n-p}$ where $p\geq 2$
  - blocking structures

::: aside
**{{< bi github >}}** Development on: [github.com/pbosetti/adas.utils](https://github.com/pbosetti/adas.utils)
:::

# {{< bi person-raised-hand >}} Question time

